{"version":3,"file":"static/js/114.ef345298.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","redux/selectors.js","components/ContactsForm/ContactsForm.jsx","components/Filter/filter.styled.js","components/Filter/Filter.jsx","components/List/list.styled.js","components/List/List.jsx","components/Contacts/Contacts.styled.js","components/Contacts/Contact.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, ErrorMessage } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  border: 2px solid #4f4d4d;\n  border-radius: 5px;\n  box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);\n\n  label {\n    font-size: 18px;\n    color: white;\n  }\n\n  input {\n    height: 26px;\n    width: 100%;\n\n    background: transparent;\n    color: white;\n    border: none;\n    border-bottom: 1px solid white;\n    outline: none;\n    font-size: 14px;\n  }\n\n  button {\n    display: inline-block;\n    padding: 5px 10px;\n    background: linear-gradient(to bottom, #4caf50, #45a049);\n    border: none;\n    color: white;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    border-radius: 5px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    cursor: pointer;\n  }\n\n  button:hover {\n    transform: scale(1.01);\n    color: black;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contact;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filters.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filters) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filters.toLowerCase());\n    });\n  }\n);\n","import { Formik, Field } from 'formik';\nimport { FormStyled, ErrorMsg } from './ContactsForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const yupValidation = Yup.object().shape({\n    name: Yup.string()\n      .min(2, 'Name must have at least 2 characters')\n      .max(25, 'Name must be 25 characters or less')\n      .required('Name is required'),\n    number: Yup.string()\n      .matches(/^[0-9-+]*$/, 'Invalid phone number')\n      .min(5, 'Phone number must be at least 5 characters')\n      .max(20, 'Phone number must be 20 characters or less')\n      .required('Phone number is required'),\n  });\n\n  const handleNewContact = ({ name, number }) => {\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    } else if (contacts.some(contact => contact.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={yupValidation}\n      onSubmit={(values, actions) => {\n        handleNewContact(values);\n        actions.resetForm();\n      }}\n    >\n      <FormStyled>\n        <label>Name</label>\n        <Field type=\"text\" name=\"name\" placeholder=\"Jack Daniel`s\" />\n        <ErrorMsg name=\"name\" component=\"span\" />\n        <label>Phone</label>\n        <Field type=\"tel\" name=\"number\" placeholder=\"+380\" />\n        <ErrorMsg name=\"number\" component=\"span\" />\n        <button type=\"submit\">Add contact</button>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 60px;\n  padding: 20px;\n  border: 2px solid #4f4d4d;\n  border-radius: 5px;\n  box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);\n\n  p {\n    font-size: 18px;\n    color: white;\n  }\n\n  input {\n    font-size: 14px;\n\n    height: 26px;\n    width: 100%;\n    border: none;\n    border-bottom: 1px solid white;\n    outline: none;\n\n    background: transparent;\n    color: white;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterContainer } from './filter.styled';\nimport { setFilter } from 'redux/filtersSlice';\nimport { selectFilter } from 'redux/selectors';\n\n\nexport const Filter = () => {\n  const filters = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterContacts = value => {\n    dispatch(setFilter(value.currentTarget.value));\n  };\n\n  return (\n    <FilterContainer>\n      <p>Find contacts by name</p>\n      <input\n        value={filters}\n        onChange={handleFilterContacts}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"name search\"\n      ></input>\n    </FilterContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContainer = styled.div`\n  li {\n    margin-top: 20px;\n\n    background-color: #fff;\n    border: 2px solid #ddd;\n    border-radius: 5px;\n    padding: 10px;\n    background: transparent;\n    color: white;\n  }\n\n  p {\n    margin-bottom: 8px;\n    font-size: 18px;\n    color: white;\n  }\n\n  button {\n    display: inline-block;\n    background: linear-gradient(to bottom, #c90000, #880e0e);\n    border: none;\n    color: white;\n    text-align: center;\n    text-decoration: none;\n    font-size: 14px;\n    border-radius: 5px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    padding: 2px 5px;\n    cursor: pointer;\n  }\n\n  button:hover {\n    transform: scale(1.05);\n    color: black;\n  }\n`;\n","import { ListContainer } from './list.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ListContainer>\n      <ul>\n        {filteredContacts.map(({ name, number, id }) => (\n          <li key={id}>\n            <p>\n              {name} : {number}\n            </p>\n            <button type=\"submit\" onClick={() => handleDeleteContact(id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </ListContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const  Bkg = styled.div`\n  min-height: 100vh;\n  background-image: url(${require('../../image/tekstura-fon.jpg')});\n  background-size: 100% 100%;\n  background-position: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center; \n`\n\nexport const Wrapper = styled.div`\n  margin: 200px auto 0;\n  width: 600px; \n`\nexport const ErrorMsg = styled.p`\ncolor : red;\nfont-size: 24px;\nmargin-top: 30px ;\n`","import { ContactForm } from '../ContactsForm/ContactsForm';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../List/List';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { Bkg, ErrorMsg, Wrapper } from './Contacts.styled';\n\n\nexport const SectionFormContacts = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Bkg>\n      <Wrapper>\n        <div>\n          <ContactForm />\n\n          <Filter />\n        </div>\n        <div>\n          <ContactList />\n        </div>\n      </Wrapper>\n      {isLoading && !error && <Loader />}\n      {error !== null && (\n        <ErrorMsg>\n          Sorry, something went wrong... Try reloading the page!\n        </ErrorMsg>\n      )}\n    </Bkg>\n  );\n};\n","import { SectionFormContacts } from 'components/Contacts/Contact';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return <SectionFormContacts />;\n};\n\nexport default ContactPage;"],"names":["FormStyled","styled","Form","_templateObject","_taggedTemplateLiteral","ErrorMsg","ErrorMessage","_templateObject2","selectContacts","state","contacts","contact","selectIsLoading","isLoading","selectError","error","selectFilter","filters","filter","selectFilteredContacts","createSelector","name","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","yupValidation","Yup","shape","min","max","required","number","matches","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","_ref","some","alert","concat","addContact","handleNewContact","resetForm","children","_jsxs","Field","type","placeholder","component","FilterContainer","Filter","value","onChange","setFilter","currentTarget","ListContainer","ContactList","filteredContacts","map","id","onClick","deleteContact","handleDeleteContact","Bkg","require","Wrapper","_templateObject3","SectionFormContacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}